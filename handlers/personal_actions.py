from aiogram import types
from dispatcher import dp, handler
from config import config
from filters import IsOwner
from subprocess import call, run
from utils.my_utils import restart, confupdate



api = config['OPENAI_TOKENS']


@dp.message_handler(IsOwner(), commands='help')
@dp.async_task
async def help(msg: types.Message):
    await msg.delete()
    await msg.answer(f'''
<b>–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.</b>
    
<b>–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ê–¥–º–∏–Ω–æ–≤:</b>

/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
/gitupdate - –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.
/gitback - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ n –≤–µ—Ä—Å–∏–π –Ω–∞–∑–∞–¥ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π.
/log - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏.
/cleanlog - –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏.
/changelogbot - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞ —Å –ª–æ–≥–∞–º–∏.
/rlogbot - —É–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞ —Å –ª–æ–≥–∞–º–∏.
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
/users - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
/addusers - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
/rusers - —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
/admins - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.
/addadmins - –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤.
/radmins - —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤.
/tokens - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.
/printtokens - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤.
/addtokens - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã.
/rtokens - —É–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã.''', parse_mode='HTML')



@dp.message_handler(IsOwner(), commands=['restart'])
@dp.async_task
async def handle_restart(message: types.Message):
    await message.delete()
    await message.answer('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
    await restart()




@dp.message_handler(IsOwner(), commands=["ping"])
@dp.async_task
async def cmd_ping_bot(message: types.Message):
    await message.delete()
    await message.answer("<b>ü§ô –ù–∞ —Å–≤—è–∑–∏!</b>", parse_mode='HTML')



@dp.message_handler(IsOwner(), commands=['users'])
@dp.async_task
async def who_is_users(message: types.Message):
    await message.delete()
    pre_msg = config['ALLOWED_IDS']

    if not(1 in pre_msg):
        if pre_msg:
            await message.answer(text=str(pre_msg)[1:-1])
        else:
            await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    else:
        await message.answer(text='–£ –≤–∞—Å –∫–∞–∂–¥—ã–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüëè.')



@dp.message_handler(IsOwner(), commands=['admins'])
@dp.async_task
async def who_is_admin(message: types.Message):
    await message.delete()
    pre_msg = config['OWNERS_IDS']

    if not (1 in pre_msg):
        if pre_msg:
            await message.answer(text=str(pre_msg)[1:-1])
        else:
            await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤.')
    else:
        await message.answer(text='–£ –≤–∞—Å –∫–∞–∂–¥—ã–π - –∞–¥–º–∏–Ωüòéüëè.')



@dp.message_handler(IsOwner(), commands=['addusers'])
@dp.async_task
async def add_users(message: types.Message):
    try:
        await message.delete()
        text = (message.text[9:]).strip()
        one = not (',' in text)
        if text:
            if one:
                text = int(text.strip())
                config['ALLOWED_IDS'].append(text)
            else:
                users = list(map(str.strip, text.split(',')))
                new_users = [int(user) for user in users[::-1] if (user not in config['ALLOWED_IDS']) and user.isdigit()]
                config['ALLOWED_IDS'].extend(new_users)

            await confupdate()
            await message.answer('–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['addadmins'])
@dp.async_task
async def add_admins(message: types.Message):
    try:
        await message.delete()
        text = (message.text[10:]).strip()
        one = not (',' in text)
        if text:
            if one:
                text = text.strip()
                if text.isdigit():
                    config['OWNERS_IDS'].append(int(text))
                else:
                    exit()
            else:
                admins = list(map(str.strip, text.split(',')))
                new_users = [int(admin) for admin in admins[::-1] if (admin not in config['OWNERS_IDS']) and admin.isdigit()]
                config['OWNERS_IDS'].extend(new_users)

            await confupdate()
            await message.answer('–ù–æ–≤—ã–µ –∞–¥–º–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ id –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['radmins'])
@dp.async_task
async def remome_admins(message: types.Message):
    try:
        await message.delete()
        text = (message.text[8:]).strip()
        one = not (',' in text)

        if text:
            if one:
                if text.isdigit():
                    config['OWNERS_IDS'].remove(int(text))
                else:
                    exit()
            else:
                [config['OWNERS_IDS'].remove(user) for user in[int(id.strip()) for id in text.split(',') if id.strip().isdigit()] if user in config['OWNERS_IDS']]


            await confupdate()
            await message.answer('–õ–∏—à–Ω–∏–µ id —É–¥–∞–ª–µ–Ω—ã!')
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['rusers'])
@dp.async_task
async def remome_users(message: types.Message):
    try:
        await message.delete()
        text = (message.text[7:]).strip()
        one = not (',' in text)

        if text:
            if one:
                text = text.strip()
                if text.isdigit():
                    config['ALLOWED_IDS'].remove(int(text))
                else:
                    exit()
            else:
                [config['ALLOWED_IDS'].remove(user) for user in[int(id.strip()) for id in text.split(',') if id.strip().isdigit()] if user in config['ALLOWED_IDS']]


            await confupdate()
            await message.answer('–õ–∏—à–Ω–∏–µ id —É–¥–∞–ª–µ–Ω—ã!')
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['gitupdate'])
@dp.async_task
async def update_bot(message: types.Message):
    await message.delete()
    m = await message.answer('–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...')
    run(['git', 'fetch'])
    run(['git', 'reset', '--hard', 'origin/main'])
    await m.edit_text('–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
    # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    await restart()





@dp.message_handler(IsOwner(), commands=['gitback'])
@dp.async_task
async def rollback_bot(message: types.Message):
    await message.delete()
    text = ((message.text)[8:]).strip()

    if not text:
        await message.answer('–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –æ—Ç /gitback –∏ —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª–∫–æ –≤–µ—Ä—Å–∏–π –Ω–∞–∑–∞–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –û—Ç–∫–∞—Ç –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.')
    else:
        if text.isdigit():
            m = await message.answer('–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...')
            run(['git', 'fetch'])
            run(['git', 'reset', '--hard', 'origin/main'])
            call(['git', 'reset', '--hard', f'HEAD~{text}'])
            await m.edit_text('–ë–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
            # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            await restart()
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['log'])
@dp.async_task
async def sendlog(message: types.Message):
    await message.delete()
    with open(handler.baseFilename, 'rb') as file:
        await message.answer_document(file)



@dp.message_handler(IsOwner(), commands=['cleanlog'])
@dp.async_task
async def clean_log_file(message: types.Message):
    await message.delete()
    with open(handler.baseFilename, 'w') as log_file:
        log_file.write('')
    await message.answer('–§–∞–π–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!')



@dp.message_handler(IsOwner(), commands=['tokens'])
@dp.async_task
async def num_of_tokens(message: types.Message):
    await message.delete()
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π OpenAI: {len(api)}')



@dp.message_handler(IsOwner(), commands=['printtokens'])
@dp.async_task
async def print_tokens(message: types.Message):
    await message.delete()
    await message.answer(text=', '.join(api))



@dp.message_handler(IsOwner(), commands=['addtokens'])
@dp.async_task
async def add_tokens(message: types.Message):
    await message.delete()
    text = (message.text[10:]).strip()
    one = not (',' in text)
    if text:
        if one:
            text = text.strip()
            config['OPENAI_TOKENS'].append(text)
        else:
            tokens = list(map(str.strip, text.split(',')))
            new_tokens = [token for token in tokens[::-1] if (token not in config['OPENAI_TOKENS']) and (token != '')]
            config['OPENAI_TOKENS'].extend(new_tokens)

        await confupdate()
        await message.answer('–ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
    else:
        await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')


@dp.message_handler(IsOwner(), commands=['rtokens'])
@dp.async_task
async def remome_tokens(message: types.Message):
    await message.delete()
    text = (message.text[8:]).strip()
    one = not (',' in text)

    if text:
        if one:
            text = text.strip()
            config['OPENAI_TOKENS'].remove(text)
        else:
            for token in text.split(','):
                token = token.strip()
                if token in config['OPENAI_TOKENS'] and token != '':
                    config['OPENAI_TOKENS'].remove(token)

        await confupdate()
        await message.answer('–õ–∏—à–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã!')
    else:
        await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')


@dp.message_handler(IsOwner(), commands=['changelogbot'])
@dp.async_task
async def change_log_bot(message: types.Message):
    try:
        await message.delete()
        text = (message.text[13:]).strip()
        one = not (',' in text)

        if text:
            if one:
                text = text.strip()
                config['LOG_BOT_TOKEN'] = text
                await confupdate()
                await message.answer('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!')
            else:
                await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

            
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, —Å–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.')
    except:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@dp.message_handler(IsOwner(), commands=['rlogbot'])
@dp.async_task
async def remove_log_bot(message: types.Message):
    await message.delete()
    config['LOG_BOT_TOKEN'] = ""
    await confupdate()
    await message.answer('–ö–ª—é—á –¥–ª—è –±–æ—Ç–∞ —Å –ª–æ–≥–∞–º–∏ —É–¥–∞–ª—ë–Ω.')
